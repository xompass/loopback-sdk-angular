<%
// Workaround for Node.js 4.x, where globals provided by EJS are not available
// from within functions defined in the template (i.e. ngdocForMethod)
global.moduleName = moduleName;
global.helpers = helpers;
-%>
// CommonJS package manager support
if (typeof module !== 'undefined' && typeof exports !== 'undefined' &&
module.exports === exports) {
// Export the *name* of this Angular module
// Sample usage:
//
//   import lbServices from './lb-services';
//   angular.module('app', [lbServices]);
//
module.exports = <%- helpers.quotedString(moduleName) %>;
}

(function(window, angular, undefined) {
'use strict';

var urlBase = <%- helpers.quotedString(urlBase) %>;
var authHeader = 'authorization';

function getHost(url) {
var m = url.match(/^(?:https?:)?\/\/([^\/]+)/);
return m ? m[1] : null;
}
// need to use the urlBase as the base to handle multiple
// loopback servers behind a proxy/gateway where the host
// would be the same.
var urlBaseHost = getHost(urlBase) ? urlBase : location.host;

<%if (comments) { -%>
    /**
    * @ngdoc overview
    * @name <%- moduleName %>
    * @module
    * @description
    *
    * The `<%- moduleName %>` module provides services for interacting with
    * the models exposed by the LoopBack server via the REST API.
    *
    */
<% } -%>
var module = angular.module(<%- helpers.quotedString(moduleName) %>, ['ngResource']);

<% for (var modelName in models) {
    var meta = models[modelName];
-%>

<%if (comments) { -%>
    /**
    * @ngdoc object
    * @name <%- moduleName %>.<%- modelName %>
    * @header <%- moduleName %>.<%- modelName %>
    * @object
    *
    * @description
    *
    * A $resource object for interacting with the `<%- modelName %>` model.
    <% if (meta.description) { -%>
        *
        * **Details**
        *
        * <%- meta.description.replace(/\n/gi, '\n * ') %>
    <% } -%>
    *
    * ## Example
    *
    * See
    * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
    * for an example of using this object.
    *
    <% /*
    * TODO(bajtos) provide an example of performing basic CrUD operations,
    * including filter/where find query
    */ -%>
    */

<% } -%>
module.factory(
<%- helpers.quotedString(modelName) %>,
[
'<%- commonResource%>', '<%- commonAuth%>', '$injector', '$q',
function(<%- commonResource%>, <%- commonAuth%>, $injector, $q) {
var R = <%- commonResource%>(
urlBase + <%- helpers.quotedString(helpers.getPropertyOfFirstEndpoint(meta.ctor, 'fullPath')) %>,
<% /*
        Constructor arguments are hardcoded for now.
        We should generate it from sharedCtor.accepts instead.
*/ -%>
{ 'id': '@id' },
{
<% meta.methods.forEach(function(action) {
    var methodName = action.name.split('.').join('$');
    if(comments) {
        ngdocForMethod(modelName, methodName, action);
    }
-%>
<%- helpers.quotedString(methodName) %>: {
<% if (action.isReturningArray()) { -%>
    isArray: true,
<% } -%>
<% if (meta.isUser && (methodName === 'login' || methodName === 'otpLogin')) { -%>
    params: {
    include: 'user',
    },
    interceptor: {
    response: function(response) {
    const data = response.data;
    if(data.code === 'OTP_REQUIRED') {
        return response.resource;
    }
    var accessToken = response.data;
    <%- commonAuth%>.setUser(
    accessToken.id, accessToken.userId, accessToken.user);
    <%- commonAuth%>.rememberMe =
    response.config.params.rememberMe !== false;
    <%- commonAuth%>.save();
    return response.resource;
    },
    },
<% } else if (meta.isUser && methodName === 'logout') { -%>
    interceptor: {
    response: function(response) {
    <%- commonAuth%>.clearUser();
    <%- commonAuth%>.clearStorage();
    return response.resource;
    },
    responseError: function(responseError) {
    <%- commonAuth%>.clearUser();
    <%- commonAuth%>.clearStorage();
    return responseError.resource;
    },
    },
<% } -%>
<% if (action.hasResourceParams) { -%>
    params: {
    <%   action.resourceParams.forEach(function(param, i, arr) { -%>
        '<%= param.arg %>': '@<%= param.arg %>',
    <%   }); //action.params.foreach -%>
    },
<% } -%>
url: urlBase + <%- helpers.quotedString(helpers.getPropertyOfFirstEndpoint(action, 'fullPath'))  %>,
method: <%- helpers.quotedString(helpers.getPropertyOfFirstEndpoint(action, 'verb')) %>,
},
<% }); // meta.methods.foreach -%>
<% if (meta.isUser) { -%>
<%if (comments) { -%>
    /**
    * @ngdoc method
    * @name <%- moduleName %>.<%- modelName %>#getCurrent
    * @methodOf <%- moduleName %>.<%- modelName %>
    *
    * @description
    *
    * Get data of the currently logged user. Fail with HTTP result 401
    * when there is no user logged in.
    *
    * @param {function(Object,Object)=} successCb
    *    Success callback with two arguments: `value`, `responseHeaders`.
    *
    * @param {function(Object)=} errorCb Error callback with one argument:
    *    `httpResponse`.
    *
    * @returns {Object} An empty reference that will be
    *   populated with the actual data once the response is returned
    *   from the server.
    */
<% } -%>
'getCurrent': {
url: urlBase + <%- helpers.quotedString(meta.getPath()) %> + '/:id',
method: 'GET',
params: {
id: function() {
var id = <%- commonAuth%>.currentUserId;
if (id == null) id = '__anonymous__';
return id;
},
},
interceptor: {
response: function(response) {
<%- commonAuth%>.currentUserData = response.data;
return response.resource;
},
responseError: function(responseError) {
<%- commonAuth%>.clearUser();
<%- commonAuth%>.clearStorage();
return $q.reject(responseError);
},
},
__isGetCurrentUser__: true,
},
<% } -%>
}
);


<% meta.methods.forEach(function(action) {
    var methodName = action.name.split('.').join('$');
(action.sharedMethod.aliases || []).forEach(function(alias) {
    var aliasMethod = alias.split('.').join('$');

    // this is to handle strong-remoting does not prepend prototype.
    // back into prototype methods
    if (action.sharedMethod.isStatic === false) {
        aliasMethod = ['prototype', aliasMethod].join('$');
    }
    if(comments) {
        ngdocForMethod(modelName, aliasMethod, action); } -%>
R[<%- helpers.quotedString(aliasMethod) %>] = R[<%- helpers.quotedString(methodName) %>];
<%  }); // aliases.foreach
}); // meta.methods.foreach
-%>

<% if (meta.isUser) { -%>
<%if (comments) { -%>
    /**
    * @ngdoc method
    * @name <%- moduleName %>.<%- modelName %>#getCachedCurrent
    * @methodOf <%- moduleName %>.<%- modelName %>
    *
    * @description
    *
    * Get data of the currently logged user that was returned by the last
    * call to {@link <%- moduleName %>.<%- modelName %>#login} or
    * {@link <%- moduleName %>.<%- modelName %>#getCurrent}. Return null when there
    * is no user logged in or the data of the current user were not fetched
    * yet.
    *
    * @returns {Object} A <%- modelName %> instance.
    */
<% } -%>
R.getCachedCurrent = function() {
var data = <%- commonAuth%>.currentUserData;
return data ? new R(data) : null;
};

<%if (comments) { -%>
    /**
    * @ngdoc method
    * @name <%- moduleName %>.<%- modelName %>#isAuthenticated
    * @methodOf <%- moduleName %>.<%- modelName %>
    *
    * @returns {boolean} True if the current user is authenticated (logged in).
    */
<% } -%>
R.isAuthenticated = function() {
return this.getCurrentId() != null;
};
<%if (comments) { -%>
    /**
    * @ngdoc method
    * @name <%- moduleName %>.<%- modelName %>#getCurrentId
    * @methodOf <%- moduleName %>.<%- modelName %>
    *
    * @returns {Object} Id of the currently logged-in user or null.
    */
<% } -%>
R.getCurrentId = function() {
return <%- commonAuth%>.currentUserId;
};
<% } -%>
<%if (comments) { -%>
    /**
    * @ngdoc property
    * @name <%- moduleName %>.<%- modelName %>#modelName
    * @propertyOf <%- moduleName %>.<%- modelName %>
    * @description
    * The name of the model represented by this $resource,
    * i.e. `<%- modelName %>`.
    */
<% } -%>
R.modelName = <%- helpers.quotedString(modelName) %>;

<% for (var scopeName in meta.scopes) {
    var scope = meta.scopes[scopeName];
    if (!scope) continue;
    var scopeMethods = scope.methods;
    // Capitalizing all names will break code for namespaced models. The corresponding target
    // classes are now capitalized in the generator code (see services.js)
    var targetClass = scope.targetClass;

if (Object.keys(scopeMethods).length > 1) {
-%>
<%if (comments) { -%>
    /**
    * @ngdoc object
    * @name <%- moduleName %>.<%- modelName %>.<%- scopeName %>
    * @header <%- moduleName %>.<%- modelName %>.<%- scopeName %>
    * @object
    * @description
    *
    * The object `<%- modelName %>.<%- scopeName %>` groups methods
    * manipulating `<%- targetClass %>` instances related to `<%- modelName %>`.
    *
    * Call {@link <%- moduleName %>.<%- modelName %>#<%- scopeName %> <%- modelName %>.<%- scopeName %>()}
    * to query all related instances.
    */
<% } -%>
<%
}

    // sort the names to make sure the get method creating the scope
    // is emitted first (R.categories before R.categories.create)
Object.keys(scopeMethods).sort().forEach(function(methodName) {
    var action = scopeMethods[methodName];

    // modelName is e.g. 'User'
    // methodName is e.g. 'accessTokens.create'
    // we need to convert it to 'User.accessTokens' and 'create'
    var names = methodName.split('.');
    var ngMethod = names.pop();
    var ngClass = [modelName].concat(names).join('.');
    if(comments) {
        ngdocForMethod(ngClass, ngMethod, action, targetClass); }
-%>
R.<%- methodName %> = function() {
var TargetResource = $injector.get(<%- helpers.quotedString(targetClass) %>);
var action = TargetResource[<%- helpers.quotedString(action.name) %>];
return action.apply(R, arguments);
};
<%    }); // forEach methods name -%>
<% } // for each scope -%>

<% if (meta.modelSchema) { -%>
<%if (comments) { -%>
    /**
    * @ngdoc object
    * @name <%- moduleName %>.<%- modelName %>#schema
    * @propertyOf <%- moduleName %>.<%- modelName %>
    * @description
    * The schema of the model represented by this $resource
    */
    R.schema = <%- JSON.stringify(meta.modelSchema, null, 2) -%>;
<% } -%>
<% } -%>

return R;
}]);

<% } // for modelName in models -%>
<% if (includeCommonModules) { %>
    module
    .factory('<%- commonAuth%>', function() {
    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];
    var propsPrefix = '$LoopBack$';

    function <%- commonAuth%>() {
    var self = this;
    props.forEach(function(name) {
    self[name] = load(name);
    });
    this.currentUserData = null;
    }

    <%- commonAuth%>.prototype.save = function() {
    var self = this;
    var storage = this.rememberMe ? localStorage : sessionStorage;
    props.forEach(function(name) {
    save(storage, name, self[name]);
    });
    };

    <%- commonAuth%>.prototype.setUser = function(accessTokenId, userId, userData) {
    this.accessTokenId = accessTokenId;
    this.currentUserId = userId;
    this.currentUserData = userData;
    };

    <%- commonAuth%>.prototype.clearUser = function() {
    this.accessTokenId = null;
    this.currentUserId = null;
    this.currentUserData = null;
    };

    <%- commonAuth%>.prototype.clearStorage = function() {
    props.forEach(function(name) {
    save(sessionStorage, name, null);
    save(localStorage, name, null);
    });
    };

    return new <%- commonAuth%>();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
    try {
    var key = propsPrefix + name;
    if (value == null) value = '';
    storage[key] = value;
    } catch (err) {
    console.log('Cannot access local/session storage:', err);
    }
    }

    function load(name) {
    var key = propsPrefix + name;
    return localStorage[key] || sessionStorage[key] || null;
    }
    })
    .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('<%- commonAuthRequestInterceptor%>');
    }])
    .factory('<%- commonAuthRequestInterceptor%>', ['$q', '<%- commonAuth%>',
    function($q, <%- commonAuth%>) {
    return {
    'request': function(config) {
    // filter out external requests
    var host = getHost(config.url);
    if (host && config.url.indexOf(urlBaseHost) === -1) {
    return config;
    }

    if (<%- commonAuth%>.accessTokenId) {
    config.headers[authHeader] = <%- commonAuth%>.accessTokenId;
    } else if (config.__isGetCurrentUser__) {
    // Return a stub 401 error for User.getCurrent() when
    // there is no user logged in
    var res = {
    body: { error: { status: 401 }},
    status: 401,
    config: config,
    headers: function() { return undefined; },
    };
    return $q.reject(res);
    }
    return config || $q.when(config);
    },
    };
    }])
    <%if (comments) { -%>
        /**
        * @ngdoc object
        * @name <%- moduleName %>.<%- commonResourceProvider%>
        * @header <%- moduleName %>.<%- commonResourceProvider%>
        * @description
        * Use `<%- commonResourceProvider%>` to change the global configuration
        * settings used by all models. Note that the provider is available
        * to Configuration Blocks only, see
        * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
        * for more details.
        *
        * ## Example
        *
        * ```js
        * angular.module('app')
        *  .config(function(<%- commonResourceProvider%>) {
        *     <%- commonResourceProvider%>.setAuthHeader('X-Access-Token');
        *  });
        * ```
        */
    <% } -%>
    .provider('<%- commonResource%>', function <%- commonResourceProvider%>() {
    <%if (comments) { -%>
        /**
        * @ngdoc method
        * @name <%- moduleName %>.<%- commonResourceProvider%>#setAuthHeader
        * @methodOf <%- moduleName %>.<%- commonResourceProvider%>
        * @param {string} header The header name to use, e.g. `X-Access-Token`
        * @description
        * Configure the REST transport to use a different header for sending
        * the authentication token. It is sent in the `Authorization` header
        * by default.
        */
    <% } -%>
    this.setAuthHeader = function(header) {
    authHeader = header;
    };
    <%if (comments) { -%>
        /**
        * @ngdoc method
        * @name <%- moduleName %>.<%- commonResourceProvider%>#getAuthHeader
        * @methodOf <%- moduleName %>.<%- commonResourceProvider%>
        * @description
        * Get the header name that is used for sending the authentication token.
        */
    <% } -%>
    this.getAuthHeader = function() {
    return authHeader;
    };

    <%if (comments) { -%>
        /**
        * @ngdoc method
        * @name <%- moduleName %>.<%- commonResourceProvider%>#setUrlBase
        * @methodOf <%- moduleName %>.<%- commonResourceProvider%>
        * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
        * @description
        * Change the URL of the REST API server. By default, the URL provided
        * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
        */
    <% } -%>
    this.setUrlBase = function(url) {
    urlBase = url;
    urlBaseHost = getHost(urlBase) || location.host;
    };
    <%if (comments) { -%>
        /**
        * @ngdoc method
        * @name <%- moduleName %>.<%- commonResourceProvider%>#getUrlBase
        * @methodOf <%- moduleName %>.<%- commonResourceProvider%>
        * @description
        * Get the URL of the REST API server. The URL provided
        * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
        */
    <% } -%>
    this.getUrlBase = function() {
    return urlBase;
    };

    this.$get = ['$resource', function($resource) {
    var <%- commonResource%> = function(url, params, actions) {
    var resource = $resource(url, params, actions);

    // Angular always calls POST on $save()
    // This hack is based on
    // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
    resource.prototype.$save = function(success, error) {
    // Fortunately, LoopBack provides a convenient `upsert` method
    // that exactly fits our needs.
    var result = resource.upsert.call(this, {}, this, success, error);
    return result.$promise || result;
    };
    return resource;
    };

    <%- commonResource%>.getUrlBase = function() {
    return urlBase;
    };

    <%- commonResource%>.getAuthHeader = function() {
    return authHeader;
    };

    return <%- commonResource%>;
    }];
    });
<% } // end if (includeCommonModules)

function getJsDocType(arg) {
    var type = arg.type == 'any' ? '*' : arg.type;
    if (!arg.required) type += '=';
    return type;
}

function ngdocForMethod(modelName, methodName, action, responseModelName) {
    // always add an empty line before the ngdoc comment:
-%>

<%
if (action.internal) {
-%>
    // INTERNAL. <%- action.internal %>
<%
    return;
}
-%>
/**
* @ngdoc method
* @name <%- moduleName %>.<%- modelName %>#<%- methodName %>
* @methodOf <%- moduleName %>.<%- modelName %>
<% if (action.deprecated) { -%>
    * @deprecated <%- action.deprecated %>
<% } -%>
*
* @description
*
<% if (!action.description) {
    action.description =  '<em>\n' +
            '(The remote method definition does not provide any description.)\n' +
            '</em>';
} -%>
* <%- action.description.replace(/\n/g, '\n             * ') %>
*
<%
    var params = action.accepts;
    var postData;
    var actionHttpMethod = helpers.getPropertyOfFirstEndpoint(action, 'verb');
    if (['POST', 'PUT'].indexOf(actionHttpMethod) != -1) {
        params = params.filter(function(arg) {
            return arg.http && (arg.http.source == 'query' || arg.http.source == 'path');
        });
        postData = action.accepts.filter(function(arg) {
            return params.indexOf(arg) == -1;
        });
    }
-%>
* @param {Object=} parameters Request parameters.
<% if (params.length == 0) { -%>
    *
    *   This method does not accept any parameters.
    *   Supply an empty object or omit this argument altogether.
<% } else {
params.forEach(function(arg) {
-%>
    *
    *  - `<%- arg.arg %>` – `{<%- getJsDocType(arg)  %>}` -<%-
    (arg.description ? ' ' + arg.description : '').replace(/\n/g, '\n             *   ') %>
    <%   if (meta.isUser && methodName === 'login' && arg.arg === 'include') { -%>
        *   Default value: `user`.
    <%   } -%>
<% }); } -%>
<% if (meta.isUser && methodName === 'login') { -%>
    *
    *  - `rememberMe` - `boolean` - Whether the authentication credentials
    *     should be remembered in localStorage across app/browser restarts.
    *     Default: `true`.
<% } -%>
<% if (postData) { -%>
    *
    * @param {Object} postData Request data.
    <% if (postData.length == 0) { -%>
        *
        * This method does not accept any data. Supply an empty object.
    <% } else if (postData.length == 1 && postData[0].http &&
            postData[0].http.source == 'body') { -%>
        *
        * This method expects a subset of model properties as request parameters.
    <% } else {
    postData.forEach(function(arg) { -%>
        *
        *  - `<%- arg.arg %>` – `{<%- getJsDocType(arg)  %>}` -<%-
        (arg.description ? ' ' + arg.description : '').replace(/\n/g, '\n             *   ') %>
<%   });
}
} -%>
*
<% var returnType = action.isReturningArray() ? 'Array.<Object>': 'Object'; -%>
* @param {function(<%- returnType %>,Object)=} successCb
*   Success callback with two arguments: `value`, `responseHeaders`.
*
* @param {function(Object)=} errorCb Error callback with one argument:
*   `httpResponse`.
*
* @returns {<%- returnType %>} An empty reference that will be
*   populated with the actual data once the response is returned
*   from the server.
*
<% if (!action.returns || action.returns.length == 0) { -%>
    * This method returns no data.
<% } else if (action.returns[0].root) { -%>
    <%   if (action.returns[0].description) { -%>
        * <%- action.returns[0].description
                .replace(/\n+/g, '\n             * ').trimRight() %>
    <%   } else { -%>
        * <em>
            * (The remote method definition does not provide any description.
            * This usually means the response is a `<%- responseModelName || modelName %>` object.)
            * </em>
    <%   } -%>
<% } else { -%>
    * Data properties:
    <%   action.returns.forEach(function(arg) { -%>
        *
        *  - `<%- arg.arg %>` – `{<%- getJsDocType(arg)  %>}` -<%-
        (arg.description ? ' ' + arg.description : '').replace(/\n/g, '\n             *   ') %>
<%   });
}
-%>
*/
<% } // end of ngdocForMethod -%>
})(window, window.angular);
